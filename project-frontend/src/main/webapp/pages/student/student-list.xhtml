<html xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:p="http://primefaces.org/ui">

<ui:composition template="/pages/template/layout.xhtml">
	<ui:define name="title" value="#{msgs.title_studentList}" />
	<ui:define name="layout">
		<h:form id="form">
			<div class="card crud-demo">
				<p:toolbar>
					<p:toolbarGroup>
						<!-- 
					    * La propiedad action y actionListener de los botones apunta a un method en el bean de jsf, ese method
					      por lo general es de tipo void porque se está trabajando con AJAX.
					    * La propiedad update permite refrescar componentes luego de ejecutarse el code definido en el action. Si son varios
					      componente poner los Ids separados por coma.
					    * La propiedad onComplete ejecuta un code en Javascript una vez finalizada el action del button. También es posible ejecutar
					      code en Javascript desde el bean de Jsf
					    -->
						<p:commandButton value="#{msgs.btn_studentList_new}" icon="pi pi-plus"
							actionListener="#{manageStudentBean.openNew}" update=":form:manage-student-content"
							oncomplete="PF('manageStudentDialog').show()" styleClass="ui-button-success"
							style="margin-right: .5rem">
							<p:resetInput target=":form:manage-student-content" />
						</p:commandButton>
						<p:commandButton value="#{msgs.btn_studentList_dar_baja}"
							actionListener="#{manageStudentBean.openNew}" update=":form:student-dropout-content"
							oncomplete="PF('studentDropoutDialog').show()" styleClass="ui-button-secondary"
							style="margin-right: .5rem">
							<p:resetInput target=":form:student-dropout-content" />
						</p:commandButton>
						<p:commandButton value="#{msgs.btn_studentList_ver_baja}" styleClass="ui-button-secondary"
							ajax="false" style="margin-right: .5rem">
						</p:commandButton>

						<p:selectOneMenu id="course" value="#{manageCourseBean.courses2}" style="margin-right: .5rem">
							<f:selectItems value="#{manageCourseBean.courses2}" />
						</p:selectOneMenu>
						<p:selectOneMenu id="year" value="#{manageYearBean.years2}" style="margin-right: .5rem">
							<f:selectItems value="#{manageYearBean.years2}" />
						</p:selectOneMenu>
					</p:toolbarGroup>
					<p:toolbarGroup align="right">
						<!-- Este es un button que tiene como objetivo exportar el contenido de la tabla que apunta a propiedad target
					         del componente dataExporter. En este caso dt-users es el identificador del componente datatable -->
						<p:commandButton value="#{msgs.btn_studentList_export}" icon="pi pi-upload"
							styleClass="ui-button-help" ajax="false">
							<p:dataExporter type="pdf" target="dt-students" fileName="users" />
						</p:commandButton>
					</p:toolbarGroup>
				</p:toolbar>

				<!-- Componente usado para mostrar tablas con datos y ejecutar operaciones
                	* La propiedad value: apunta a una lista de objetos de tipo UserDto que está en el bean de jsf
                	* La propiedad var: es una instancia de esta lista para poder extaer los objetos, es como iterador
                	  que luego permite poder decir user.<propiedad del objeto>.
                	* La propiedad paginator: define si se quiere paginar o no y es posible definir la position del mismo usando
                	  la propiedad pagePosition.
                    * La propiedad rows: define la cantidad de filas
                	* El facet header define un encabezado y agrega un button para filtrar. Por defecto esto lo hace el solo, si quieren algo
                	  con mayor detalle ver el showcase.  
                 -->
				<p:dataTable id="dt-students" widgetVar="dtStudents" var="student" value="#{manageStudentBean.students}"
					reflow="true" paginator="true" rows="10" paginatorPosition="bottom">
					<f:facet name="header">
						<div class="products-table-header">
							<span style="font-weight: bold" value="#{msgs.header_table_studentList}" />
							<span class="filter-container ui-input-icon-left"> <i class="pi pi-search"></i>
								<p:inputText id="globalFilter" onkeyup="PF('dtStudents').filter()"
									placeholder="Buscar" />
							</span>

						</div>
					</f:facet>

					<p:column headerText="#{msgs.column_studentList_id}" sortBy="#{student.idNum}"
						filterBy="#{student.idNum}">
						<h:outputText value="#{student.idNum}" />
					</p:column>
					<p:column headerText="#{msgs.column_studentList_firstName}" sortBy="#{student.firstName}"
						filterBy="#{student.firstName}">
						<h:outputText value="#{student.firstName}" />
					</p:column>
					<p:column headerText="#{msgs.column_studentList_lastName}" sortBy="#{student.lastName}"
						filterBy="#{student.lastName}">
						<h:outputText value="#{student.lastName}" />
					</p:column>
					<p:column headerText="#{msgs.column_studentList_gender}" sortBy="#{student.gender}"
						filterBy="#{student.gender}">
						<h:outputText value="#{student.gender}" />
					</p:column>
					<p:column headerText="#{msgs.column_studentList_municipality}" sortBy="#{student.municipality}"
						filterBy="#{student.municipality}">
						<h:outputText value="#{student.municipality}" />
					</p:column>
					<p:column headerText="#{msgs.column_studentList_status}" sortBy="#{student.statusDescription}"
						filterBy="#{student.statusDescription}">
						<h:outputText value="#{student.statusDescription}" />
					</p:column>

					<p:column exportable="false">
						<p:commandButton icon="pi pi-pencil" action="#{manageStudentBean.openForEdit}"
							update=":form:manage-student-content" oncomplete="PF('manageStudentDialog').show()"
							styleClass="edit-button rounded-button ui-button-success" process="@this">
							<f:setPropertyActionListener value="#{student}"
								target="#{manageStudentBean.selectedStudent}" />
							<p:resetInput target=":form:manage-student-content" />
						</p:commandButton>
						<p:commandButton class="ui-button-warning rounded-button" icon="pi pi-trash" process="@this"
							action="#{manageStudentBean.deleteStudent}">
							<f:setPropertyActionListener value="#{student}"
								target="#{manageStudentBean.selectedStudent}" />
							<p:confirm header="#{msgs.btn_studentList_confirmDelete}"
								message="#{msgs.btn_studentList_delete_msg}" icon="pi pi-exclamation-triangle" />
						</p:commandButton>
						<p:commandButton class="ui-button-warning rounded-button" icon="pi pi-book" process="@this"
							update=":form:grades-student-content" oncomplete="PF('gradesStudentDialog').show()">
						</p:commandButton>
					</p:column>

				</p:dataTable>

				<!-- ui:include es una etiqueta de facelet que permite incluir pages y de esta forma el code no se carga tanto -->
				<ui:include src="student-form.xhtml"></ui:include>
				<ui:include src="student-grades.xhtml"></ui:include>
				<ui:include src="student_dropout_form.xhtml"></ui:include>

				<!-- Este comoponente se utiliza mucho para el caso de los eliminar, que es donde casi siempre se necesita confirmation,
				su uso es bien sencillo, cada confirmDialog va atado a un p:confirm que es el que se define dentro del button -->
				<p:confirmDialog global="true" showEffect="fade" width="300">
					<p:commandButton value="#{msgs.btn_studentList_delete_yes}" type="button"
						styleClass="ui-confirmdialog-yes" icon="pi pi-check" />
					<p:commandButton value="#{msgs.btn_studentList_delete_no}" type="button"
						styleClass="ui-confirmdialog-no ui-button-secondary" icon="pi pi-times" />
				</p:confirmDialog>
			</div>
		</h:form>
	</ui:define>
</ui:composition>

</html>