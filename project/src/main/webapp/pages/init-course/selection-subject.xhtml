<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui">

<ui:composition template="/pages/template/layout.xhtml">
    <ui:define name="title">
        Nuevo Curso Universitario
    </ui:define>
    <ui:define name="layout">
        <h:form id="form">
            <p:panelGrid columns="2" layout="grid">
                <h:form>
                    <div class="card crud-demo">

<!--                        <p:toolbar>-->
<!--                            <p:toolbarGroup>-->
<!--                                &lt;!&ndash;-->
<!--                                * La propiedad action y actionListener de los botones apunta a un method en el bean de jsf, ese method-->
<!--                                  por lo general es de tipo void porque se está trabajando con AJAX.-->
<!--                                * La propiedad update permite refrescar componentes luego de ejecutarse el code definido en el action. Si son varios-->
<!--                                  componente poner los Ids separados por coma.-->
<!--                                * La propiedad onComplete ejecuta un code en Javascript una vez finalizada el action del button. También es posible ejecutar-->
<!--                                  code en Javascript desde el bean de Jsf-->
<!--                                &ndash;&gt;-->
<!--                                <p:commandButton value="Nuevo" icon="pi pi-plus"-->
<!--                                                 actionListener="#{manageSubjectBean.openNew}"-->
<!--                                                 update=":form:manage-subject-content"-->
<!--                                                 oncomplete="PF('manageSubjectDialog').show()"-->
<!--                                                 styleClass="ui-button-success" style="margin-right: .5rem">-->
<!--                                    <p:resetInput target=":form:manage-subject-content" />-->
<!--                                </p:commandButton>-->
<!--                            </p:toolbarGroup>-->
<!--                            <p:toolbarGroup align="right">-->
<!--                                &lt;!&ndash; Este es un button que tiene como objetivo exportar el contenido de la tabla que apunta a propiedad target-->
<!--                                     del componente dataExporter. En este caso dt-subjects es el identificador del componente datatable &ndash;&gt;-->
<!--                                <p:commandButton value="Export" icon="pi pi-upload"-->
<!--                                                 styleClass="ui-button-help" ajax="false">-->
<!--                                    <p:dataExporter type="pdf" target="dt-subjects" fileName="subjects" />-->
<!--                                </p:commandButton>-->
<!--                            </p:toolbarGroup>-->
<!--                        </p:toolbar>-->

                        <p:dataTable id="dt-subjects" widgetVar="dtSubjects" var="subject"
                                     value="#{manageSubjectBean.subjects}" reflow="true" paginator="true"
                                     rows="10" paginatorPosition="bottom">
                            <f:facet name="header">
                                <div class="products-table-header">
                                    <span style="font-weight: bold">Asignaturas</span> <span
                                        class="filter-container ui-input-icon-left"> <i
                                        class="pi pi-search"></i> <p:inputText id="globalFilter"
                                                                               onkeyup="PF('dtSubjects').filter()" placeholder="Buscar" />
                                </span>

                                </div>
                            </f:facet>


                            <p:column headerText="Asignatura" sortBy="#{subject.name}" filterBy="#{subject.name}">
                                <h:outputText value="#{subject.name}" />
                            </p:column>

                            <p:column exportable="false">
                                <p:commandButton icon="pi pi-pencil" action="#{manageSubjectBean.openForEdit}"
                                                 update=":form:manage-subject-content"
                                                 oncomplete="PF('manageSubjectDialog').show()"
                                                 styleClass="edit-button rounded-button ui-button-success"
                                                 process="@this">
                                    <f:setPropertyActionListener value="#{subject}"
                                                                 target="#{manageSubjectBean.selectedSubject}" />
                                    <p:resetInput target=":form:manage-subject-content" />
                                </p:commandButton>
                                <p:commandButton class="ui-button-warning rounded-button"
                                                 icon="pi pi-trash" process="@this"
                                                 action="#{manageSubjectBean.deleteSubject}" >
                                    <f:setPropertyActionListener value="#{subject}"
                                                                 target="#{manageSubjectBean.selectedSubject}" />
                                    <p:confirm header="Confirmar" message="Está seguro de eliminar la asignatura?" icon="pi pi-exclamation-triangle"/>
                                </p:commandButton>
                            </p:column>

                        </p:dataTable>

                        <!-- ui:include es una etiqueta de facelet que permite incluir pages y de esta forma el code no se carga tanto -->
                        <ui:include src="subject-form.xhtml"></ui:include>

                        <!-- Este componente se utiliza mucho para el caso de los eliminar, que es donde casi siempre se necesita confirmation,
                        su uso es bien sencillo, cada confirmDialog va atado a un p:confirm que es el que se define dentro del button -->
                        <p:confirmDialog global="true" showEffect="fade" width="300">
                            <p:commandButton value="Si" type="button"
                                             styleClass="ui-confirmdialog-yes" icon="pi pi-check" />
                            <p:commandButton value="No" type="button"
                                             styleClass="ui-confirmdialog-no ui-button-secondary"
                                             icon="pi pi-times" />
                        </p:confirmDialog>
                    </div>
                </h:form>
                <h:form>
                    tgreg
                </h:form>
            </p:panelGrid>
        </h:form>
    </ui:define>
</ui:composition>
</html>